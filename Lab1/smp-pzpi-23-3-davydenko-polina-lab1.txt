Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії

ЗВІТ
з лабораторної роботи №1
з дисципліни «Скриптові мови програмування»
на тему: «ПРОГРАМУВАННЯ У СКРИПТОВІЙ МОВІ SHELL (BASH)»

Викона(в/ла)
ст. гр. ПЗПІ-23-3
Давиденко Поліна

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025
________________________________________ 

1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	03.03.2025	0.1	Створено розділ «Завдання»
2	10.03.2025	1	Створено розділ «Опис Виконаної роботи». Додано висновки, додатки і оформлено звіт
________________________________________ 

2 ЗАВДАННЯ
–	Ознайомитися з основними командами Bash для роботи з файлами та текстовими даними.
–	Навчитися використовувати команди select, ls, awk, sort, uniq, tee, cat, sed, iconv тощо.
–	Розробити Bash-скрипт для перетворення CSV файла розкладу занять у придатний для імпорту в Google Календар CSV формат.
–	Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.
________________________________________ 
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
	Перший блок коду ініціалізує назву скрипта, версію, прапорець "quiet" і має дві функції: print_help() – показує довідку, print_version() – показує версію (див. Додаток Б строки №1-18).
	Далі скрипт перевіряє ключі --help, --version, -q або --quiet. Якщо quiet, прапорець встановлюється і зсувається список аргументів (див. Додаток Б строки №19-28).
	Спочатку перевіряємо, які аргументи були передані в командний рядок. Якщо перший аргумент дорівнює --help, викликається функція print_help, яка виводить допомогу зі синтаксисом команди та описом доступних параметрів. Якщо перший аргумент дорівнює --version, викликається функція print_version, яка виводить версію скрипта. Після виведення довідки або версії, скрипт завершується з кодом успіху exit 0.
	Якщо ж передано параметр -q або --quiet, це означає, що скрипт повинен працювати в тихому режимі, не виводячи додаткову інформацію в стандартний потік виведення. У такому випадку змінна quiet встановлюється в 1, а аргументи зсуваються на один крок вперед за допомогою команди shift, щоб зберегти правильний порядок наступних параметрів.
	Далі скрипт	 займається обробкою аргументів, коли вони не відповідають жодній з опцій допомоги чи версії. Скрипт перевіряє, чи передано два аргументи – академічну групу та файл. Якщо ні, скрипт автоматично шукає файли CSV, які відповідають шаблону TimeTable_??_??_20??.csv, і пропонує користувачу вибір файлу для подальшої обробки. Якщо файли знайдені, користувач може вибрати один з них для подальшого використання. Після вибору файлу, скрипт витягує всі академічні групи з цього файлу за допомогою iconv, awk і sort. Якщо групи виявлені, користувачеві пропонується вибрати одну з них. У разі наявності лише однієї групи, вона автоматично вибирається. Якщо ж аргументи вказані правильно, вони зберігаються в змінних group та file (див. Додаток Б строки №29-76).
	Далі перевіряє, чи файл існує, чи можна його прочитати, і чи містить він потрібну академічну групу (див. Додаток Б строки №77-87).
	З імені файлу вилучається дата для створення назви вихідного файлу. Далі формується заголовок CSV (див. Додаток Б строки №88-92).
	Наступний великий блок коду робить наступні дії: конвертує файл у UTF-8, фільтрує за назвою групи, форматує дати і час у формат Google Calendar та уникає дублювання предметів і додає нумерацію.
	Спочатку, використовуючи команду iconv, дані з файлу конвертуються з кодування WINDOWS-1251 в UTF-8. Після цього команда tr '\r' '\n' замінює символи повернення каретки на новий рядок, що дозволяє правильно обробити дані з Windows-формату. Потім за допомогою grep "$group" фільтруються лише ті рядки, що містять назву групи, яку було передано як аргумент.
	Далі результат передається в команду awk, яка обробляє кожен рядок. Спочатку в блоці BEGIN встановлюється роздільник полів OFS як кому (,), що означає, що виведені дані будуть містити поля, розділені комами.
	В середині блоку обробки, якщо кількість полів рядка (NF) більша або дорівнює 13, кожне поле очищається від лапок за допомогою функції gsub(/^"|"$/, "", $i). Далі перевіряється формат дат у другому та четвертому полях (очікується формат дати як dd.mm.yyyy), і якщо дата не відповідає цьому формату, рядок пропускається через команду next. Потім у датах замінюються крапки на слеші (формат dd/mm/yyyy). 
	Далі з першого поля видаляється частина, що відповідає формату "група -", і зберігається лише назва групи.
	Для часу початку та кінця занять, що містяться в полях 3 та 5 відповідно, виконується їхнє розбиття за допомогою split($3, start_time, ":") та split($5, end_time, ":"). Потім ці значення переводяться у формат 12-годинного часу з додаванням AM/PM. Якщо час початку або кінця заняття некоректний, обробка цього рядка пропускається.
	Далі створюється рядок даних, який містить назву предмету, дату початку та кінця, час початку та кінця заняття та опис предмету. Ці дані зберігаються в масиві lessons, де ключем є комбінація предмету, дати та часу початку. Ключі для сортування також зберігаються в масиві keys.
	У блоці END, після завершення обробки всіх рядків, виконується сортування ключів за допомогою функції asort(). Для кожного відсортованого ключа отримуються відповідні дані з масиву lessons, які потім перетворюються на рядок, що містить всі необхідні дані, розділені комами. Для кожного унікального поєднання предмету, опису та дати додається порядковий номер, щоб уникнути дублювання.
	Цей рядок записується у вихідний файл, зазначений у змінній out. Якщо не встановлено тихий режим, то також виводиться на екран (див. Додаток Б строки №93-170).
	Якщо обробка CSV завершилась з помилкою – виводиться повідомлення та скрипт завершує роботу з кодом помилки (див. Додаток Б строки №171-174).
________________________________________ 

4 ВИСНОВКИ
	У результаті виконання лабораторної роботи було ознайомлено з основними командами Bash для роботи з файлами та текстовими даними. Вивчили ефективно використовувати команди select, ls, awk, sort, uniq, tee, cat, sed, iconv, для обробки та маніпулювання текстовими даними у командному рядку. Також було створено Bash-скрипт для перетворення CSV-файла з розкладом занять у формат, сумісний з Google Календарем.
________________________________________ 

ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/opK671IjN3I
Хронологічний опис відеозапису:
00:00 — Короткий опис відео
00:32 — Опис скрипта
08:09 — Тестування
________________________________________ 

ДОДАТОК Б
Програмний код
	GitHub репозиторій: https://github.com/NureDavydenkoPolina/smp-pzpi-23-3-davydenko-polina/blob/main/Lab1/smp-pzpi-23-3-davydenko-polina-lab1/smp-pzpi-23-3-davydenko-polina-lab1-code