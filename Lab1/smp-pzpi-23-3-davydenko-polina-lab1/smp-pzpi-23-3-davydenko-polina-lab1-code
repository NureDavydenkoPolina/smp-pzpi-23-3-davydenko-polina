#!/bin/bash

SCRIPT_NAME="${0##*/}"
VERSION="1.0"
quiet=0

print_help() {
    echo "Синтаксис виклику:"
    echo "  ${SCRIPT_NAME} [--help | --version] | [[-q|--quiet] академ_група файл_із_cist.csv]"
    echo "Ключі:"
    echo "  --help        Вивести довідку, завершити роботу та повернути успішний результат"
    echo "  --version     Вивести інформацію про версію, завершити роботу та повернути успішний результат"
    echo "  -q, --quiet   Не виводити інформацію у стандартний потік виведення"
}

print_version() {
    echo "${SCRIPT_NAME} версія ${VERSION}"
}
if [[ "$1" == "--help" ]]; then
    print_help
    exit 0
elif [[ "$1" == "--version" ]]; then
    print_version
    exit 0
elif [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
    quiet=1
    shift
fi
if [ $# -lt 2 ]; then
    mapfile -t csv_files < <(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)

    if [ ${#csv_files[@]} -eq 0 ]; then
        echo "Не знайдено жодного файлу за шаблоном TimeTable_??_??_20??.csv" >&2
        exit 1
    fi

    echo "Оберіть CSV-файл:"
    select file in "${csv_files[@]}"; do
        if [ -n "$file" ]; then
            break
        else
            echo "Некоректний вибір. Спробуйте ще раз."
        fi
    done

    mapfile -t groups < <(
        iconv -f WINDOWS-1251 -t UTF-8 "$file" 2>/dev/null | tr '\r' '\n' |
        awk -F',' 'NR > 1 {gsub(/^"|"$/, "", $1); split($1, a, " - "); print a[1]}' |
        sort | uniq
    )

    if [ $? -ne 0 ]; then
        echo "Помилка під час обробки CSV-файлу." >&2
        exit 2
    fi

    if [ ${#groups[@]} -eq 0 ]; then
        echo "Не знайдено жодної академічної групи у файлі." >&2
        exit 3
    elif [ ${#groups[@]} -eq 1 ]; then
        group="${groups[0]}"
        [ $quiet -eq 0 ] && echo "Знайдена єдина група: $group"
    else
        echo "Оберіть академічну групу:"
        select group in "${groups[@]}"; do
            if [ -n "$group" ]; then
                break
            else
                echo "Некоректний вибір. Спробуйте ще раз."
            fi
        done
    fi
else
    group="$1"
    file="$2"
fi
if [ ! -r "$file" ]; then
    echo "Файл '$file' не існує або недоступний для читання." >&2
    exit 4
fi

group_found=$(iconv -f WINDOWS-1251 -t UTF-8 "$file" 2>/dev/null | tr '\r' '\n' | grep -c "$group")
if [ "$group_found" -eq 0 ]; then
    echo "Групу '$group' не знайдено у файлі '$file'." >&2
    echo "Оберіть іншу групу або перевірте правильність назви." >&2
    exit 5
fi
file_date=$(basename "$file" | grep -oE '[0-9]{2}_[0-9]{2}_[0-9]{4}')
output_file="Google_TimeTable_${file_date}.csv"

[ $quiet -eq 0 ] && echo "Subject,Start Date,Start Time,End Date,End Time,Description"
echo "Subject,Start Date,Start Time,End Date,End Time,Description" > "$output_file"
iconv -f WINDOWS-1251 -t UTF-8 "$file" 2>/dev/null | tr '\r' '\n' | grep "$group" | awk -F',' -v grp="$group" -v quiet="$quiet" -v out="$output_file" '
BEGIN {
    OFS = ","
}
NF >= 13 {
    for (i = 1; i <= NF; i++) {
        gsub(/^"|"$/, "", $i)
    }

    if ($2 !~ /^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/ || $4 !~ /^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/) {
        next
    }

    gsub(/\./, "/", $2)
    gsub(/\./, "/", $4)

    sub(grp " - ", "", $1)

    split($3, start_time, ":")
    if (length(start_time) < 2) next
    start_h = start_time[1] + 0
    start_m = start_time[2]
    ampm_start = (start_h >= 12) ? "PM" : "AM"
    if (start_h == 0) start_h = 12
    else if (start_h > 12) start_h -= 12
    formatted_start = sprintf("%02d:%02d %s", start_h, start_m, ampm_start)

    split($5, end_time, ":")
    if (length(end_time) < 2) next
    end_h = end_time[1] + 0
    end_m = end_time[2]
    ampm_end = (end_h >= 12) ? "PM" : "AM"
    if (end_h == 0) end_h = 12
    else if (end_h > 12) end_h -= 12
    formatted_end = sprintf("%02d:%02d %s", end_h, end_m, ampm_end)

    subject_key = $1
    subject_date = $2
    subject_desc = $13

    data_line = sprintf("%s,%s,%s,%s,%s,%s", $1, $2, formatted_start, $4, formatted_end, $13)
    lessons[subject_key,subject_date,formatted_start] = data_line
    keys[NR] = subject_key "|" subject_date "|" formatted_start
}
END {
    n = asort(keys, sorted_keys)
    counter = 0

    for (i = 1; i <= n; i++) {
        split(sorted_keys[i], arr, "|")
        k = arr[1]
        d = arr[2]
        t = arr[3]
        entry = lessons[k,d,t]

        split(entry, fields, ",")
        subj = fields[1]
        date = fields[2]
        desc = fields[6]

        if (subj ~ /Лб/) {
            type_key = subj ";" desc ";" date
        } else {
            type_key = subj ";" desc ";" date
        }

        if (!(type_key in seen)) {
            seen[type_key] = ++counter_map[substr(type_key, 1, index(type_key, ";") - 1)]
        }

        fields[1] = fields[1] "; №" seen[type_key]
        line = fields[1] OFS fields[2] OFS fields[3] OFS fields[4] OFS fields[5] OFS fields[6]

        print line >> out
        if (quiet == 0) print line
    }
}
'
if [ $? -ne 0 ]; then
    echo "Помилка під час обробки CSV-файлу для групи '$group'." >&2
    exit 7
fi

